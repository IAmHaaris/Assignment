{"ast":null,"code":"import axios from 'axios';\nimport { API_URL } from '../../Constants';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeJwtAuthenticationService(username, password) {\n    console.log(\"Inside the Jwt Authentication\");\n    return axios.post(`${API_URL}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    console.log('registerSuccessfulLogin for jwt');\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n    console.log(token);\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    console.log(user);\n    if (user === null) return false;\n    return true;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/Haaris/Desktop/MBZ/src/components/MBZ_Assign/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeJwtAuthenticationService","username","password","console","log","post","createBasicAuthToken","window","btoa","registerSuccessfulLoginForJwt","token","sessionStorage","setItem","setupAxiosInterceptors","createJWTToken","logout","removeItem","isUserLoggedIn","user","getItem","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AAEP,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAChDC,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACA,WAAOR,KAAK,CAACS,IAAN,CAAY,GAAER,OAAQ,eAAtB,EAAsC;AACzCI,MAAAA,QADyC;AAEzCC,MAAAA;AAFyC,KAAtC,CAAP;AAIH;;AAEDI,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWK,MAAM,CAACC,IAAP,CAAYP,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAGDO,EAAAA,6BAA6B,CAACR,QAAD,EAAWS,KAAX,EAAkB;AAC3CP,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACAO,IAAAA,cAAc,CAACC,OAAf,CAAuBd,gCAAvB,EAAyDG,QAAzD;AACA,SAAKY,sBAAL,CAA4B,KAAKC,cAAL,CAAoBJ,KAApB,CAA5B;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACH;;AAEDI,EAAAA,cAAc,CAACJ,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAGDK,EAAAA,MAAM,GAAG;AACLJ,IAAAA,cAAc,CAACK,UAAf,CAA0BlB,gCAA1B;AACH;;AAEDmB,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBrB,gCAAvB,CAAX;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYc,IAAZ;AACA,QAAIA,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDL,EAAAA,sBAAsB,CAACH,KAAD,EAAQ;AAE1Bd,IAAAA,KAAK,CAACwB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKN,cAAL,EAAJ,EAA2B;AACvBM,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+Bf,KAA/B;AACH;;AACD,aAAOa,MAAP;AACH,KANL;AAQH;;AAhDuB;;AAmD5B,eAAe,IAAIxB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios' \nimport { API_URL } from '../../Constants'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeJwtAuthenticationService(username, password) {\n        console.log(\"Inside the Jwt Authentication\")\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    \n    registerSuccessfulLoginForJwt(username, token) {\n        console.log('registerSuccessfulLogin for jwt')\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n        console.log(token)\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        console.log(user)\n        if (user === null) return false\n        return true\n    }\n\n    setupAxiosInterceptors(token) {\n\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}