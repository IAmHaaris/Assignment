{"ast":null,"code":"import axios from 'axios';\nimport { API_URL } from '../../Constants';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(`${API_URL}/basicauth`, {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    console.log(\"Inside the Jwt Authentication\");\n    return axios.post(`${API_URL}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  registerSuccessfulLogin(username, password) {\n    //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n    console.log('registerSuccessfulLogin');\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username); //this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    alert(token);\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n    console.log(token);\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    console.log(user);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/Haaris/Desktop/MBZ/src/components/todo/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","executeJwtAuthenticationService","console","log","post","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","registerSuccessfulLoginForJwt","token","alert","setupAxiosInterceptors","createJWTToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AAEP,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAElD,WAAON,KAAK,CAACO,GAAN,CAAW,GAAEN,OAAQ,YAArB,EACH;AAAEO,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AAAjB;AAAX,KADG,CAAP;AAEH;;AAEDK,EAAAA,+BAA+B,CAACN,QAAD,EAAWC,QAAX,EAAqB;AAChDM,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACA,WAAOb,KAAK,CAACc,IAAN,CAAY,GAAEb,OAAQ,eAAtB,EAAsC;AACzCI,MAAAA,QADyC;AAEzCC,MAAAA;AAFyC,KAAtC,CAAP;AAIH;;AAEDI,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWS,MAAM,CAACC,IAAP,CAAYX,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAEDW,EAAAA,uBAAuB,CAACZ,QAAD,EAAWC,QAAX,EAAqB;AACxC;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAK,IAAAA,cAAc,CAACC,OAAf,CAAuBjB,gCAAvB,EAAyDG,QAAzD,EAHwC,CAIxC;AACH;;AAEDe,EAAAA,6BAA6B,CAACf,QAAD,EAAWgB,KAAX,EAAkB;AAC3CC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACAH,IAAAA,cAAc,CAACC,OAAf,CAAuBjB,gCAAvB,EAAyDG,QAAzD;AACA,SAAKkB,sBAAL,CAA4B,KAAKC,cAAL,CAAoBH,KAApB,CAA5B;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH;;AAEDG,EAAAA,cAAc,CAACH,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAGDI,EAAAA,MAAM,GAAG;AACLP,IAAAA,cAAc,CAACQ,UAAf,CAA0BxB,gCAA1B;AACH;;AAEDyB,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGV,cAAc,CAACW,OAAf,CAAuB3B,gCAAvB,CAAX;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYe,IAAZ;AACA,QAAIA,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGV,cAAc,CAACW,OAAf,CAAuB3B,gCAAvB,CAAX;AACA,QAAI0B,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDL,EAAAA,sBAAsB,CAACF,KAAD,EAAQ;AAE1BrB,IAAAA,KAAK,CAAC+B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKP,cAAL,EAAJ,EAA2B;AACvBO,QAAAA,MAAM,CAAC1B,OAAP,CAAeC,aAAf,GAA+BY,KAA/B;AACH;;AACD,aAAOa,MAAP;AACH,KANL;AAQH;;AAlEuB;;AAqE5B,eAAe,IAAI/B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios' \nimport { API_URL } from '../../Constants'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        \n        return axios.get(`${API_URL}/basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    executeJwtAuthenticationService(username, password) {\n        console.log(\"Inside the Jwt Authentication\")\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin(username, password) {\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n        console.log('registerSuccessfulLogin')\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        //this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        alert(token)\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n        console.log(token)\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        console.log(user)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(token) {\n\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}